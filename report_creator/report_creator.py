import logging
import os
import re
import textwrap
import traceback
from typing import Optional

# Visualization
import humanize
import matplotlib as mpl
import plotly.io as pio
from cycler import cycler

# Templating & formatting
from jinja2 import Environment, FileSystemLoader

# Internal imports
from .components import (
    Base,
    Block,
    Group,
)
from .theming import get_rc_theme, report_creator_colors
from .utilities import (
    _convert_filepath_to_datauri,
    _gfm_markdown_to_html,
    _time_it,
)

# Configure logging
logger = logging.getLogger("report_creator")
logging.getLogger("urllib3").setLevel(logging.WARNING)
logging.getLogger("matplotlib.font_manager").setLevel(logging.WARNING)


class ReportCreator:
    """
    Generates interactive HTML reports from structured Python data.

    The `ReportCreator` class provides a streamlined interface for constructing
    and rendering comprehensive, visually appealing reports. It supports a wide
    range of components, including text, metrics, tables, charts, and diagrams,
    all customizable through a declarative API.

    Key Features:
    - **Modular Design:** Build reports using a hierarchy of components
      (`Block`, `Group`, `Collapse`, etc.) for clear organization.
    - **Data Visualization:** Easily integrate various chart types
      (`Bar`, `Line`, `Pie`, `Radar`, `Scatter`) powered by Plotly Express.
    - **Tabular Data:** Display and interact with tables using `Table` and
      `DataTable` components.
    - **Markdown & HTML Support:** Incorporate formatted text and raw HTML for
      flexible content rendering.
    - **Diagrams:** Embed `Diagram` components defined using Mermaid.js syntax.
    - **Images:** Add images with captions and optional links using the `Image` component.
    - **Customizable Styling:** Fine-tune the appearance of reports using themes, CSS, and component-specific options.
    - **Interactive Elements:** Includes interactive components like collapsible sections and sortable tables.
    - **Programmatic Report Generation:**  Construct reports entirely through Python code, making it ideal for automated workflows.
    - **Data URI conversion:** Convert local images or urls to datauri for embedded reports.

    Args:
        title (str): The title of the report.
        description (str, optional): The description of the report (markdown is ok). Defaults to None.
        author (str, optional): The author of the report. Defaults to None.
        logo (str, optional): A GitHub username to use as the report icon, a url/filepath to an image, or None. Defaults to None,
            which will use an autogenerated icon based on the title.
        theme (str, optional): The theme to use for the report. Defaults to "rc".
        code_theme (str, optional): The theme for code highlighting. Defaults to "github-dark".
        diagram_theme (str, optional): The mermaid theme to use.
            Options: "default", "neo", "neo-dark", "dark", "neutral", "forest", & "base". Defaults to "default".
        accent_color (str, optional): The accent color for the report. Defaults to "black".
        footer (str, optional): The footer text for the report (markdown is ok). Defaults to None.
    """

    def __init__(
        self,
        title: str,
        *,
        description: Optional[str] = None,
        author: Optional[str] = None,
        logo: Optional[str] = None,
        theme: str = "rc",
        code_theme: str = "github-dark",
        diagram_theme: str = "default",
        accent_color: str = "black",
        footer: Optional[str] = None,
    ):
        self.title = title
        self.description = description
        self.author = author
        self.code_theme = code_theme
        self.diagram_theme = diagram_theme
        self.accent_color = accent_color
        self.footer = footer

        logger.info(f"ReportCreator: {self.title=} {self.description=}")

        # Setup plotting template
        pio.templates["rc"] = get_rc_theme()

        # Validate theme
        valid_themes = list(pio.templates.keys())
        assert theme in valid_themes, (
            f"Theme '{theme}' not in available themes: {', '.join(valid_themes)}"
        )
        pio.templates.default = theme

        # Setup header icon/logo
        self._create_header(logo)

    def _create_header(self, logo: Optional[str]) -> None:
        """Create the header icon or logo for the report."""
        if logo:
            if logo.startswith(("http", "data:image")):
                self.header_str = f"""<img src="{logo}" style="width: 125px;">"""
            elif os.path.exists(logo):
                self.header_str = f"""<img src="{_convert_filepath_to_datauri(logo)}" style="width: 125px;">"""
            else:
                logger.info(f"GitHub: {logo}")
                self.header_str = f"""<img src="https://avatars.githubusercontent.com/{logo}?s=125" style="width: 125px;">"""
        else:
            # Create an icon from the report title
            match = re.findall(r"[A-Z]", self.title)
            icon_text = "".join(match[:2]) if match else self.title[0]
            icon_color, text_color = self.accent_color, "white"

            width = 150
            cx = width / 2
            cy = width / 2
            r = width / 2
            fs = int(r / 15)

            self.header_str = textwrap.dedent(f"""
                <svg xmlns="http://www.w3.org/2000/svg" version="1.1" width="{width}" height="{width}">
                    <style>
                        .icon_text_style {{
                            font-size: {fs}rem;
                            stroke-width: 1px;
                            font-family: sans-serif;
                            font-weight: bold;
                            text-anchor: middle;
                            dominant-baseline: central;
                        }}
                    </style>
                    <circle cx="{cx}" cy="{cy}" r="{r}" fill="{icon_color}" />
                    <text class="icon_text_style" x="50%" y="50%" fill="{text_color}">{icon_text}</text>
                </svg>
            """)

    def __enter__(self):
        """Save the original color schema and apply report colors."""
        self.default_colors = mpl.rcParams["axes.prop_cycle"].by_key()["color"]
        mpl.rcParams["axes.prop_cycle"] = cycler("color", report_creator_colors)
        return self

    def __exit__(self, exc_type, exc_value, exc_traceback):
        """Restore the original color schema."""
        mpl.rcParams["axes.prop_cycle"] = cycler("color", self.default_colors)

    @_time_it
    def save(self, view: Base, path: str, prettify_html: bool = True) -> None:
        """
        Save the report to a file.

        Args:
            view (Base): The view object representing the report content.
            path (str): The path to save the report file.
            prettify_html (bool, optional): Whether to prettify the generated HTML. Defaults to True.

        Raises:
            ValueError: If the view object is not an instance of Block or Group.
        """
        if not isinstance(view, (Block, Group)):
            raise ValueError(
                f"Expected view to be either Block or Group object, got {type(view).__name__} instead"
            )

        logger.info(f"Saving report to {path}")

        try:
            body = view.to_html()
        except Exception:
            body = f"""<pre>{traceback.format_exc()}</pre>"""

        # Find the template directory and load the default template
        template_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), "templates")
        file_loader = FileSystemLoader(template_dir)
        template = Environment(loader=file_loader).get_template("default.html")

        # Determine which libraries to include
        include_plotly = "plotly-graph-div" in body
        include_datatable = "include_datatable" in body
        include_mermaid = "include_mermaid" in body
        include_hljs = "include_hljs" in body

        logger.info(
            f"ReportCreator features: {include_plotly=}, {include_datatable=}, {include_mermaid=}, {include_hljs=}"
        )
        logger.info(
            f"ReportCreator metadata: {self.description=}, {self.author=} {prettify_html=}"
        )

        # Render the HTML template
        html = template.render(
            title=self.title or "Report",
            description=_gfm_markdown_to_html(self.description) if self.description else "",
            author=self.author.strip() if self.author else "",
            body=body,
            header_logo=self.header_str,
            include_plotly=include_plotly,
            include_datatable=include_datatable,
            include_mermaid=include_mermaid,
            include_hljs=include_hljs,
            code_theme=self.code_theme,
            diagram_theme=self.diagram_theme,
            accent_color=self.accent_color,
            footer=_gfm_markdown_to_html(self.footer).strip() if self.footer else None,
        )

        # Save the HTML to file
        with open(path, "w", encoding="utf-8") as f:
            if prettify_html:
                try:
                    from bs4 import BeautifulSoup

                    soup = BeautifulSoup(html, "html.parser")
                    f.write(soup.prettify(formatter="minimal"))
                except ImportError:
                    logger.warning("BeautifulSoup not installed, saving without prettification")
                    f.write(html)
            else:
                f.write(html)

            logger.info(
                f'ReportCreator created {path}, size: {humanize.naturalsize(len(html), binary=True)}, title: "{self.title}"'
            )
